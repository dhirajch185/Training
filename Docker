Docker images are layers of images compressed together.

--------------------------------------------------

To create the docker group and add your user:

Create the docker group.


 sudo groupadd docker

Add your user to the docker group.


 sudo usermod -aG docker $USER

remember to reboot the machine for it to work (in terminal just use 'sudo reboot' :)

to check if the user is added to the docker group just run 'groups your_linux_username'

-----------------------------------------------------



docker ps (list containers which are actively running)

docker ps --all (lists all containers which docker knows)

docker ps -aq (lists all the containers ids)



docker logs conatinername/ID (logs for troubleshooting applications) tip-- first few characters of the container ID should still show the container

without logs command, we can use another way like - "docker container start --attach containerID" (will attach a terminal to the container container to show the logs)

docker run hello-world:linux ( creates a container from 'hello-world' image, stated it and attached terminal to show log)

docker run = docker container create + docker container start + docker container attach

Exit Code =0 means the the container created with the correct entrypoint.

docker rm containerID (delete the container)

docker rm -aq | xargs docker rm  (pulls the list of container ids from the left and feed it to docker rm on the right using linux xargs command)

docker run -d containerid (will run the docker in 'detached' mode. That means no terminal to check logs is attached to the container. so if the application hangs or keeps running, you are not stuck in the interactive terminal forver)

docker stop containerID (should stop the container after trying to gracefully stop the application first)

docker stop -t 0 ContainerID (Forcefully stop the container and the application. This might cause data loss of the application)  

docker run -d --name naming-this-container image-name   (creating a container from the image and naming it) 

docker run -d --name naming-this-container -p outsidePortNumber:insidePortnumber image-name (binds a port of Docker's container which is 'insidePortNumber' to the machine's port i.e, 'outsideportnumber)
Example:  docker run -d --name our-web-servercontainer -p 5001:5000 our-web-server

------------------------- Volume mounting to retain data after container is terminated -----------------

docker run --rm --entrypoint sh ubuntu -c "echo 'hello there' > /tmp/file && cat /tmp/file" (This will write a file in the docker container but if you do a cat /tmp/file it is not accessible becuase its not in yor own machine)

-v or --volume can mount a folder from our server to the docker container

docker run --rm --entrypoint sh -v "/tmp/container":"/tmp" ubuntu -c "echo 'hello there' > /tmp/file && cat /tmp/file" (This will create a folder 'container' in ubuntu server and the container will write to the folder)

docker run --name website -p 8080:80 -v "$PWD/website:/usr/share/nginx/html" --rm nginx  (Here docker mounts the outside/server's volume "$PWD/website" to inside container volume "/usr/share/nginx/html" and removes the container


------------Build own docker images and push it to dockerhub.--------------
Example Dockerfile is like below.


FROM ubuntu       (dockr Image from which your image will be buiilt based of) 

LABEL maintainer="Carlos Nunez <dev@carlosnunez.me>"  (To provide details of the maintainer of the image)

USER root                      (to mention docker which user will execute the commands under this line here its root user)

COPY ./entrypoint.bash /           (copies files from a directory provided, to the Docker build command to the container image.)

RUN apt -y update                  (Run statements are commands that customize our image. )
RUN apt -y install curl bash         (This is a great place to install additional software or configure files needed by your application. Since our example script needs "Curl" and "Bash" to run, this Docker file uses run commands to install those programs. )
RUN chmod 755 /entrypoint.bash

USER nobody (Here we're using the user command to set the default users for containers created from this image to the powerless "nobody" user. This ensures that we can't break out of the container and potentially change important files on our host.)

ENTRYPOINT [ "/entrypoint.bash"  (The entry point tells Docker what command containers created from this image should run. You can also use the CMD command to do this, though there are differences. )


------------------------------------------------------------------------------------------------------------------

Just like containers, every docker image will have an ID.

docker build -t Our-first-imagename --file Dockerfile path/to/files_included_into_dockerImage

docker run Our-first-imagename (to run our custom created image)


docker images (list all the images created)

docker rmi image_name (to delete the created image)

docker system prune (This will remove:   - all stopped containers  - all networks not used by at least one container  - all dangling images  - unused build cache) and save space on your server.


---------------------------------------------------------------------------------------------------------------------
We can run 'docker exec container_ID ShellCommand_like_date' to execute commands on the container using CLI

You can even use exec to start terminal sessions within the container. This can be really helpful while troubleshooting. Let's say that we wanted to use a bash cell within the container to do this. Since we're going to be entering keystrokes, we need to tell exec that this command needs to be interactive. Additionally, since we're starting a shell, we'll also need to tell Docker that we'll need something called a quote, unquote, sudo TTY, so that our terminal can properly interact with the container's terminal. We can use the dash dash interactive and dash dash TTY options respectively to enable both of those modes. So, putting that all together, the command I'm going to run is docker exec dash dash interactive dash dash TTY, then the ID for the container, or D 9 0 D, like we saw earlier, and then finally, the shell that I want to use, or bash in this case. Once I hit enter, I'm greeted with a prompt and can run additional commands, which is very exciting. Since I'm done here, I'm going to press Control D to exit out of the shell, but be really careful here. Pressing this keystroke too many times will log you out of your real terminal.


docker exec --interactive --tty container_ID bash
docker exec -i -t Container_ID sh (would open the container with shell terminal just like above command.. )
---------------------------- Container Performance -------------------------------------

A good use case to fire up the container and monitor the cpu and memory usage would be

---------------> docker stats container_ID

example: First create a container --> "docker run --name=alpine --entrypoint=sleep infinity -d alpine" and then run "docker stats"
To increase cpu usage, run this command --> "docker exec -i -t alpine sh" then when the terminal opens type "yes" to trigger a script to print 'y' indefinitely on the terminal. Observe the cpu usage on the other terminal for the container using "docker stats alpine"

---------------> docker top container_ID
shows the process running on the container without running an exec into the container.

--------------> docker inspect container_ID
shows advanced info of container in json format. to script against docker this is very helpful.

example: docker inspect alpine | less  (q to quit from the search)

----------------------------> Best Practices <---------------------------
1) Always use docker official images if possible for base image
2) Use Container image scanners if using verified image is not possible
3) Always tag an image with proper version. Never use the tag 'latest' as it might cause issues for future builds.
4) use users other than root to run the containers. like "docker run --rm -it --user someNon-root-user some-image:v1.0.1"
We can do it in Dockerfile as well. like adding a line before ENTRYPOINT line as --> USER someNon-root-user

---------------------------> Docker compose  <-----------------------------------------

Docker compose makes starting and connecting multiple containers as easy as docker-compose up.

----------------------------> Challenges  <---------------------------------------

Difficult to link docker networks together across hosts
controlling Docker containers across multiple hosts is cumbersome
No built-in solutions for moving containers from host to host
Production concerns (load balancing and securing traffic) difficult with docker client alone

Kubernetes container orchestrator is capable of managing very large numbers of containers. It helps in grouping, scaling and connecting containers without outside world really easy.

Load balancing and securing container traffic to/from the outside worlds are much easier with Kubernetes.

